//test error
//all branches must return the same type
//like error03.l2 on crack

int main() {
    int n = 0xF03ABCDE;
    int i;

    for (i = 0; i < 32; i++) {
        if ((n & 0x1) == i) return i;
        n >>= 1;
    }

    #oh snap fella - we didn't find a 1, let's double check
if (n >> 0 == 0x1)
return 0;
else {
if (n >> 1 == 0x1)
return 1;
else {
if (n >> 2 == 0x1)
return 2;
else {
if (n >> 3 == 0x1)
return 3;
else {
if (n >> 4 == 0x1)
return 4;
else {
if (n >> 5 == 0x1)
return 5;
else {
if (n >> 6 == 0x1)
return 6;
else {
if (n >> 7 == 0x1)
return 7;
else {
if (n >> 8 == 0x1)
return 8;
else {
if (n >> 9 == 0x1)
return 9;
else {
if (n >> 10 == 0x1)
return 10;
else {
if (n >> 11 == 0x1)
return 11;
else {
if (n >> 12 == 0x1)
return 12;
else {
if (n >> 13 == 0x1)
return 13;
else {
if (n >> 14 == 0x1)
return 14;
else {
if (n >> 15 == 0x1)
return 15;
else {
if (n >> 16 == 0x1)
return 16;
else {
if (n >> 17 == 0x1)
return 17;
else {
if (n >> 18 == 0x1)
return 18;
else {
if (n >> 19 == 0x1)
return 19;
else {
if (n >> 20 == 0x1)
return 20;
else {
if (n >> 21 == 0x1)
return 21;
else {
if (n >> 22 == 0x1)
return 22;
else {
if (n >> 23 == 0x1)
return 23;
else {
if (n >> 24 == 0x1)
return 24;
else {
if (n >> 25 == 0x1)
return 25;
else {
if (n >> 26 == 0x1)
return 26;
else {
if (n >> 27 == 0x1)
return 27;
else {
if (n >> 28 == 0x1)
return 28;
else {
if (n >> 29 == 0x1)
return 29;
else {
if (n >> 30 == 0x1)
return 30;
else {
if (n >> 31 == 0x1)
return 31;
else {
return false;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

    return 0;
}
