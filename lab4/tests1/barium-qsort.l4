//test return 1
// Your everyday life qsort

void isort(int[] array, int low, int high)
{
  for (int i = low; i < high; i++)
  {
    int j = i - 1;
    bool run = true;
    while (j >= 0 && run)
    {
      if (array[j] > array[j+1])
      {
        int temp = array[j+1];
        array[j+1] = array[j];
        array[j] = temp;
        j--;
      }
      else {
        run = false;
      }
    }
  }
}


void qsort(int[] array, int low, int high)
{
  assert(low <= high);

  // Base Case
  if (high - low <= 6)
  {
    isort(array, low, high);
    return;
  }

  // Partition
  int pivot_index;
  if (high/(low+1) % 2 == 0)
    pivot_index = (low + high) / 2;
  else {
    pivot_index = low + (high - low) % 5;
    if (pivot_index >= high)
      pivot_index = high - 1;
  }
  int pivot = array[pivot_index];
  int mid = low;
  int temp;
  array[pivot_index] = array[high-1];
  array[high-1] = pivot;
  for (int i = low; i < high; i++)
  {
    if (array[i] < pivot) {
      temp = array[mid];
      array[mid] = array[i];
      array[i] = temp;
      mid++;
    }
  }

  if (mid < high) {
    temp = array[mid];
    array[mid] = array[high-1];
    array[high-1] = temp;
  }

  // Recurse
  qsort(array, low, mid);
  qsort(array, mid+1, high);
}

int main()
{
  int len = 32*1024;
  int[] array = alloc_array(int, len);

  // Initialize
  for (int i = 0; i < len; i++)
    array[i] = len - i;

  // Sort
  qsort(array, 0, len);

  // Verify
  for (int i = 1; i < len; i++)
    if (array[i - 1] > array[i])
      return -1;

  return 1;
}
