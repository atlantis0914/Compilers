//test return 5
// LET'S DO THE TIME WARP AGAIN!!!!

bool jump_to_the_left(int[][] vals, int[] pos, int n) {
	int x = pos[0];
	int y = pos[1];
	x -= 2; // a jump is like two steps
	if (x < 0 || x >= n) {
		return false;
	}
	pos[0] = x;
	vals[y][x] += 1;
	return true;
}

bool step_to_the_right(int[][] vals, int[] pos, int n) {
	int x = pos[0];
	int y = pos[1];
	x += 1;
	if (x < 0 || x >= n) {
		return false;
	}
	pos[0] = x;
	vals[y][x] += 1;
	return true;
}

bool hands_on_your_hips_knees_in_tight(int[][] vals, int[] pos, int n) {
	int i = 0;
	// Like heck does this translate nicely... let's do something random
	for ( ; i < n; i++) {
		vals[pos[1]][i] += pos[1];
	}
	return true;
}

bool pelvic_thrust(int[][] vals, int[] pos, int n) {
	int x = pos[0];
	int y = pos[1];
	int i = 0;
	if ((y - 1) < 0 || (y + 1) >= n) {
		return false;
	}
	// Random jumping!!!
	for ( ; i < 10; i++) {
		if (i % 2 == 0) {
			vals[y-1][x] += 1;
		}
		else {
			vals[y+1][x] += 1;
		}
	}
	return true;
}

int main() {
	int n = 5; // board size
	int[][] vals;
	int[] pos;
	int i = 0;
	bool do_again = true;
	bool j;
	bool s;
	bool h;
	bool p;
	pos = alloc_array(int, 2);
	pos[0] = 2;
	pos[1] = 2;
	vals = alloc_array(int[], n);
	for( ; i < n; i++) {
		vals[i] = alloc_array(int, n);
	}
	// Eventually this'll jump off the board since we move more to
	// the left each time.
	while (do_again) {
		j = jump_to_the_left(vals, pos, n);
		s = step_to_the_right(vals, pos, n);
		h = hands_on_your_hips_knees_in_tight(vals, pos, n);
		p = pelvic_thrust(vals, pos, n);
		do_again = j && s && h && p;
	}
	return vals[1][2];
}
