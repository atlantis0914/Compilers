//test return 0

void fill_array(int[] arr) {
	arr[0] = 65;
	arr[1] = 148;
	arr[2] = 131;
	arr[3] = 243;
	arr[4] = 20;
	arr[5] = 224;
	arr[6] = 2;
	arr[7] = 114;
	arr[8] = 19;
	arr[9] = 3;
	arr[10] = 14;
	arr[11] = 245;
	arr[12] = 74;
	arr[13] = 126;
	arr[14] = 156;
	arr[15] = 230;
	arr[16] = 214;
	arr[17] = 182;
	arr[18] = 112;
	arr[19] = 252;
	arr[20] = 251;
	arr[21] = 207;
	arr[22] = 200;
	arr[23] = 143;
	arr[24] = 241;
	arr[25] = 80;
	arr[26] = 197;
	arr[27] = 163;
	arr[28] = 179;
	arr[29] = 24;
	arr[30] = 248;
	arr[31] = 37;
	arr[32] = 54;
	arr[33] = 140;
	arr[34] = 113;
	arr[35] = 233;
	arr[36] = 236;
	arr[37] = 162;
	arr[38] = 202;
	arr[39] = 199;
	arr[40] = 78;
	arr[41] = 17;
	arr[42] = 46;
	arr[43] = 29;
	arr[44] = 50;
	arr[45] = 115;
	arr[46] = 70;
	arr[47] = 93;
	arr[48] = 73;
	arr[49] = 222;
	arr[50] = 204;
	arr[51] = 63;
	arr[52] = 67;
	arr[53] = 110;
	arr[54] = 132;
	arr[55] = 135;
	arr[56] = 42;
	arr[57] = 133;
	arr[58] = 12;
	arr[59] = 60;
	arr[60] = 53;
	arr[61] = 106;
	arr[62] = 229;
	arr[63] = 39;
	arr[64] = 201;
	arr[65] = 253;
	arr[66] = 30;
	arr[67] = 145;
	arr[68] = 172;
	arr[69] = 102;
	arr[70] = 186;
	arr[71] = 94;
	arr[72] = 194;
	arr[73] = 185;
	arr[74] = 124;
	arr[75] = 76;
	arr[76] = 175;
	arr[77] = 38;
	arr[78] = 121;
	arr[79] = 21;
	arr[80] = 134;
	arr[81] = 221;
	arr[82] = 250;
	arr[83] = 187;
	arr[84] = 159;
	arr[85] = 9;
	arr[86] = 32;
	arr[87] = 155;
	arr[88] = 196;
	arr[89] = 83;
	arr[90] = 213;
	arr[91] = 138;
	arr[92] = 91;
	arr[93] = 22;
	arr[94] = 195;
	arr[95] = 191;
	arr[96] = 96;
	arr[97] = 130;
	arr[98] = 44;
	arr[99] = 254;
	arr[100] = 208;
	arr[101] = 82;
	arr[102] = 120;
	arr[103] = 119;
	arr[104] = 193;
	arr[105] = 189;
	arr[106] = 68;
	arr[107] = 88;
	arr[108] = 66;
	arr[109] = 0;
	arr[110] = 18;
	arr[111] = 228;
	arr[112] = 47;
	arr[113] = 92;
	arr[114] = 125;
	arr[115] = 244;
	arr[116] = 174;
	arr[117] = 223;
	arr[118] = 117;
	arr[119] = 87;
	arr[120] = 237;
	arr[121] = 128;
	arr[122] = 231;
	arr[123] = 190;
	arr[124] = 219;
	arr[125] = 216;
	arr[126] = 64;
	arr[127] = 118;
	arr[128] = 158;
	arr[129] = 167;
	arr[130] = 101;
	arr[131] = 239;
	arr[132] = 25;
	arr[133] = 192;
	arr[134] = 71;
	arr[135] = 75;
	arr[136] = 136;
	arr[137] = 240;
	arr[138] = 180;
	arr[139] = 51;
	arr[140] = 8;
	arr[141] = 72;
	arr[142] = 36;
	arr[143] = 100;
	arr[144] = 95;
	arr[145] = 40;
	arr[146] = 152;
	arr[147] = 103;
	arr[148] = 232;
	arr[149] = 16;
	arr[150] = 183;
	arr[151] = 97;
	arr[152] = 242;
	arr[153] = 177;
	arr[154] = 108;
	arr[155] = 176;
	arr[156] = 154;
	arr[157] = 77;
	arr[158] = 169;
	arr[159] = 107;
	arr[160] = 144;
	arr[161] = 105;
	arr[162] = 234;
	arr[163] = 45;
	arr[164] = 58;
	arr[165] = 238;
	arr[166] = 62;
	arr[167] = 27;
	arr[168] = 48;
	arr[169] = 205;
	arr[170] = 59;
	arr[171] = 168;
	arr[172] = 81;
	arr[173] = 61;
	arr[174] = 181;
	arr[175] = 210;
	arr[176] = 178;
	arr[177] = 5;
	arr[178] = 127;
	arr[179] = 49;
	arr[180] = 85;
	arr[181] = 161;
	arr[182] = 111;
	arr[183] = 171;
	arr[184] = 203;
	arr[185] = 34;
	arr[186] = 141;
	arr[187] = 123;
	arr[188] = 160;
	arr[189] = 99;
	arr[190] = 52;
	arr[191] = 84;
	arr[192] = 212;
	arr[193] = 129;
	arr[194] = 4;
	arr[195] = 153;
	arr[196] = 164;
	arr[197] = 137;
	arr[198] = 166;
	arr[199] = 142;
	arr[200] = 7;
	arr[201] = 157;
	arr[202] = 151;
	arr[203] = 211;
	arr[204] = 43;
	arr[205] = 249;
	arr[206] = 225;
	arr[207] = 23;
	arr[208] = 86;
	arr[209] = 147;
	arr[210] = 220;
	arr[211] = 184;
	arr[212] = 165;
	arr[213] = 109;
	arr[214] = 11;
	arr[215] = 206;
	arr[216] = 41;
	arr[217] = 35;
	arr[218] = 33;
	arr[219] = 247;
	arr[220] = 26;
	arr[221] = 246;
	arr[222] = 209;
	arr[223] = 198;
	arr[224] = 89;
	arr[225] = 69;
	arr[226] = 104;
	arr[227] = 10;
	arr[228] = 90;
	arr[229] = 218;
	arr[230] = 170;
	arr[231] = 13;
	arr[232] = 188;
	arr[233] = 56;
	arr[234] = 15;
	arr[235] = 217;
	arr[236] = 116;
	arr[237] = 57;
	arr[238] = 227;
	arr[239] = 235;
	arr[240] = 173;
	arr[241] = 1;
	arr[242] = 226;
	arr[243] = 55;
	arr[244] = 98;
	arr[245] = 28;
	arr[246] = 150;
	arr[247] = 149;
	arr[248] = 6;
	arr[249] = 122;
	arr[250] = 146;
	arr[251] = 31;
	arr[252] = 79;
	arr[253] = 215;
	arr[254] = 139;
}

int[] merge(int[] a, int[] b, int len1, int len2) {
	int[] dest = alloc_array(int,len1 + len2);

	int i = 0;
	int j = 0;
	int k = 0;
	
	while(i < len1 && j < len2) {
		if(a[i] <= b[j]) {
			dest[k] = a[i];
			i++;
		} else {
			dest[k] = b[j];
			j++;
		}
		k++;
	}
	
	while(i < len1) {
		dest[k] = a[i];
		k++;
		i++;
	}

	while(j < len2) {
		dest[k] = b[j];
		k++;
		j++;
	}
	
	return dest;
}

void merge_sort(int[] arr, int len) {
	if(len <= 1)
		return;
	
	int l1 = len/2;
	int l2 = len - l1;
	
	int[] a = alloc_array(int,l1);
	int[] b = alloc_array(int,l2);
	
	int i=0;
	for(int j = 0; j < l1; j++) {
		a[j] = arr[i];
		i++;
	}
		
	for(int j=0; j < l2; j++) {
		b[j] = arr[i];
		i++;
	}

	merge_sort(a,l1);
	merge_sort(b,l2);
	int[] res = merge(a,b,l1,l2);
	
	for(i=0;i<len;i++)
		arr[i] = res[i];
}

int main() {

	int LEN = 255;
	int[] arr = alloc_array(int,LEN);
	
	fill_array(arr);
	
	merge_sort(arr,LEN);
	
	for(int i=0;i < LEN-1; i++)
        //Elements are [1..254]
		assert(arr[i] < arr[i+1]);

	return 0;
}
