//test return -1252306784
/* 
 * Slightly modified 15-122 resource code
 * Original at http://www.cs.cmu.edu/~fp/courses/15122-f10/misc/rand/mersenne.c0
 */

// Mersenne twister pseudorandom number generator
// According to Wikipedia

struct rand {
	int[] MT;
	int index;
};

typedef struct rand* rand_t;

// Right shift in C0 is arithmetic; need
// to implement a zero-fill right shift
// as y>>>k = (y>>k)&~(-1<<(32-k)) (1 <= k <= 31)

int generateNumbers(rand_t gen) {
	int[] MT = gen->MT;
	int i;
	for (i = 0; i < 624; i++) {
		int y = (MT[i] & 0x80000000) + (MT[(i+1)%624] & 0x7fffffff);
		MT[i] = MT[(i+397)%624] ^ ((y>>1) & ~(-1<<31));
		if ((y & 1) == 1)
			MT[i] ^= 0x9908b0df;
	}
	return 0;
}

rand_t init_rand(int seed) {
	rand_t gen = alloc(struct rand);
	int[] MT = alloc_array(int, 624);
	int i;
	gen->MT = MT;
	gen->index = 0;
	MT[0] = seed;
	for (i = 1; i < 624; i++)
		MT[i] = 0x6c078965 * (MT[i-1] ^ ((MT[i-1]>>30) & ~(-1<<2))) + i;
	return gen;
}

int rand(rand_t gen) {
	if (gen->index == 0) generateNumbers(gen);
	{
		int[] MT = gen->MT;
		int y = MT[gen->index];
		y ^= (y >> 11) & ~(-1<<21);
		y ^= (y << 7) & 0x9d2c5680;
		y ^= (y << 15) & 0xefc60000;
		y ^= (y >> 18) & ~(-1<<14);

		gen->index = (gen->index + 1) % 624;
		return y;
	}
}

int main() {
	rand_t r = init_rand(1234567890);
	int i;
	for (i = 0; i < 10000; i++) {
		rand(r);
	}
	return rand(r);
}
