//test return 0
struct nest {
struct nest* self;
};
int asserter(bool b)
{
	return b ? 0 : 1/0;
}
//Makes sure your compiler doesn't hate to dereference
int test()
{
	struct nest* foo = alloc(struct nest);
	foo->self = foo;
	foo->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self->self = NULL;
	asserter(foo->self == NULL);
	return 0;
}
//Makes sure you dereference quickish
int main()
{
	int i;
	for (i = 0; i < 250000; i++)
		test();
	return 0;
}
