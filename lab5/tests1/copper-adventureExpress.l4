//test return 6909

bool isPrime(int n) {
	if(n < 2) {return false;}
	int factor = 2;
	while(factor * factor <= n) {
		if(n % factor == 0) {return false;}
		factor += 1;
	}
	return true;
}

int badPi(int n) {
	int count = 0;
	for(int i = 0; i < n; i++) {count += (isPrime(i) ? 1 : 0);}
	return count;
}

int pi(int n) {
	//returns num of primes below n
	bool[] primes = alloc_array(bool, n);
	for(int i = 0; i < n; i++) {primes[i] = true;}
	primes[0] = false;
	primes[1] = false;
	for(int i = 0; i * i < n; i++) {
		if(primes[i]) {
			for(int j = i * i; j < n; j += i) {
				primes[j] = false;
			}
		}
	}
	int count = 0;
	for(int i = 0; i < n; i++) {count += (primes[i] ? 1 : 0);}
	return count;
}

int main() {
	int input = 1991 * 35;
	int answer = 6909;
	int badPiAnswer = badPi(input);
	int piAnswer = pi(input);
	if(badPiAnswer != answer) {return badPiAnswer;}
	if(piAnswer != answer) {return 100000 + piAnswer;}
	return piAnswer;
}