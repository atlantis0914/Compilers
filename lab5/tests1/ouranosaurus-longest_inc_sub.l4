//test return 6

int search(int [] arr, int target, int low, int high) 
{
  int mid;

  if (low > high) {
    return -1;
  }
  
  mid = low + (high - low)/2;
    
  if ( arr[mid] > target ) {
    return search(arr, target, low, mid - 1);
  } else if ( arr[mid] < target ) {
    return search(arr, target, mid + 1, high);
  } else {
    return mid;
  }
}

int longest_inc_sub(int [] arr, int len) 
{
  int i;
  int j;
  int maxlen;
  int[] q = alloc_array(int, len);

  for( i = 0; i < len; i++) {
    maxlen = 0;
    for( j = 0; j < i; j++) {    
      if( arr[i] > arr[j] ) {
        if( q[j] > maxlen ) { maxlen = q[j]; }
      }
    }
    q[i] = maxlen + 1;
  }

  maxlen = 0;
  for( i = 0; i < len; i++) {
    if ( q[i] > maxlen ) { maxlen = q[i]; }
  }
  return maxlen;
}



int main() {
    int i; int len;
    int[] a;

    len = 16;
    a = alloc_array(int, len);

    // Van der Corput sequence (Implemented from description on wikipedia)
    a[0] = 0;
    a[1] = 8;
    a[2] = 4;
    a[3] = 12;
    a[4] = 2;
    a[5] = 10;
    a[6] = 6;
    a[7] = 14;
    a[8] = 1;
    a[9] = 9;
    a[10] = 5;
    a[11] = 13;
    a[12] = 3;
    a[13] = 11;
    a[14] = 7;
    a[15] = 15;

    i = longest_inc_sub(a, len);
    return i;
}
