//test return -1235543875
// Uses the 15-122 Mersenne twister to do maze generation.

// sadly: no printchar

void printchar(int c) {
  return;
}

struct rand {
	int[] MT;
	int index;
};

typedef struct rand* rand_t;

int generateNumbers(rand_t gen) {
	int[] MT = gen->MT;
	int i;
	for (i = 0; i < 624; i++) {
		int y = (MT[i] & 0x80000000) + (MT[(i+1)%624] & 0x7fffffff);
		MT[i] = MT[(i+397)%624] ^ ((y>>1) & ~(-1<<31));
		if ((y & 1) == 1)
			MT[i] ^= 0x9908b0df;
	}
	return 4;
}

rand_t init_rand(int seed) {
	rand_t gen = alloc(struct rand);
	int[] MT = alloc_array(int, 624);
	int i;
	gen->MT = MT;
	gen->index = 0;
	MT[0] = seed;
	for (i = 1; i < 624; i++)
		MT[i] = 0x6c078965 * (MT[i-1] ^ ((MT[i-1]>>30) & ~(-1<<2))) + i;
	return gen;
}

int rand(rand_t gen) {
	if (gen->index == 0) generateNumbers(gen);
	{
		int[] MT = gen->MT;
		int y = MT[gen->index];
		y ^= (y >> 11) & ~(-1<<21);
		y ^= (y << 7) & 0x9d2c5680;
		y ^= (y << 15) & 0xefc60000;
		y ^= (y >> 18) & ~(-1<<14);

		gen->index = (gen->index + 1) % 624;
		return y;
	}
}

int shuffle(int[] a, int n) {
	rand_t r = init_rand(1234567890);
  int i;
  a[0] = 0;
  for (i = 1; i < n; i++) {
    int j = rand(r) % (i + 1);
    if (j < 0) j += (i + 1);
    a[i] = a[j];
    a[j] = i;
  }
  return rand(r);
}

int get_comp(int[] a, int n) {
  int parent = a[n];
  while (parent != a[parent]) parent = a[parent];
  return parent;
}

bool one_comp(int[] a, int n) {
  int cparent = get_comp(a, 0);
  int i;
  for (i = 1; i < n; i++) {
    if (get_comp(a, i) != cparent) return false;
  }
  return true;
}

bool join(int[] prtary, int[] wghary, int a, int b) {
  int ap = get_comp(prtary, a);
  int bp = get_comp(prtary, b);
  int prt;
  if (ap == bp) return false;
  if (wghary[ap] > wghary[bp]) {
    wghary[ap] += wghary[bp];
    prtary[bp] = ap;
    prt = b;
    while (prt != ap) {
      prt = prtary[prt];
      prtary[prt] = ap;
    }
  } else {
    wghary[bp] += wghary[ap];
    prtary[ap] = bp;
    prt = a;
    while (prt != bp) {
      prt = prtary[prt];
      prtary[prt] = bp;
    }
  }
  return true;
}

int adler(int *a, int *b, int input) {
  *a = (*a + input) % 65521;
  *b = (*b + *a) % 65521;
  return 5;
}

int print_maze(int[] horiz, int[] vert, int w, int h) {
  int i;
  int j;
  int *a = alloc(int);
  int *b = alloc(int);
  *a = 1;

  printchar(10);
  for (i = 0; i < w; i++) {
    printchar(43);
    printchar(45);
  }
  printchar(43);
  printchar(10);
  for (i = 0; i < h-1; i++) {
    printchar(124);
    printchar(32);
    
    for (j = 0; j < w-1; j++) {
      if (vert[j*h+i] > 0) {
        adler(a, b, 124);
        printchar(124);
      }
      else {
        adler(a, b, 32);
        printchar(32);
      }
      printchar(32);
    }
    printchar(124);
    printchar(10);
    
    printchar(43);
    for (j = 0; j < w; j++) {
      if (horiz[i*w+j] > 0) {
        adler(a, b, 45);
        printchar(45);
      }
      else {
        adler(a, b, 32);
        printchar(32);
      }
      printchar(43);
    }
    printchar(10);
  }
  
  printchar(124);
  printchar(32);

  for (j = 0; j < w-1; j++) {
    if (vert[j*h+(h-1)] > 0) {
      adler(a, b, 124);
      printchar(124);
    }
    else {
      adler(a, b, 32);
      printchar(32);
    }
    printchar(32);
  }
  printchar(124);
  printchar(10);
  printchar(43);
  
  for (i = 0; i < w; i++) {
    printchar(45);
    printchar(43);
  }
  printchar(10);
  return (*b << 16) + *a;
}

int maze_maker(int w, int h) {
  int[] parents = alloc_array(int, w*h);
  int[] weights = alloc_array(int, w*h);
  int[] edges = alloc_array(int, w*(h-1)+h*(w-1));
  int[] horiz = alloc_array(int, w*(h-1));
  int[] vert = alloc_array(int, h*(w-1));
  int i;
  int j;
  int cntr;
  
  for (i = 0; i < w*h; i++) {
    parents[i] = i;
    weights[i] = 1;
  }
  
  shuffle(edges, w*(h-1)+h*(w-1));


  for (i = 0; i < w*(h-1); i++) horiz[i] = 1;
  for (i = 0; i < h*(w-1); i++) vert[i] = 1;
  
  cntr = 0;
  while (!one_comp(parents, w*h)) {
    int row;
    int col;
    int n = edges[cntr];
    
    if (n < w*(h-1)) {
      row = n / w;
      col = n % w;
      if (col < 0) col += w;
      if (join(parents, weights, row*w+col, (row+1)*w+col)) {
        horiz[n] = 0;
      }
    } else {
      row = (n - w*(h-1)) % h;
      col = (n - w*(h-1)) / h;
      if (row < 0) row += h;
      if (join(parents, weights, row*w+col, row*w+col+1)) {
        vert[n - w*(h-1)] = 0;
      }
    }
    cntr++;
  }
  
  return print_maze(horiz, vert, w, h);
}

int main() {
  int width = 40;
  int height = 490;
  return maze_maker(width, height);
}
