//test return 2821
//Computes Carmichael numbers.
//This is faster than "carm_slow" if loop invariants are hoisted

//computes the exponential mod
//where expmod(b, e, m) = b^e mod m
int expmod(int b, int e, int mod)
{
    if (e == 0)
        return 1;

    int c = 1;
    int e_prime = 0;

    while (e_prime < e) {
        e_prime++;
        c = ((b*c) % mod);
    }

    return c;
}

//http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
int sqrt(int num)
{
    int res = 0;
    int bit = 1 << 30;
 
    // "bit" starts at the highest power of four <= the argument.
    while (bit > num)
        bit >>= 2;
 
    while (bit != 0) {
        if (num >= res + bit) {
            num -= res + bit;
            res = (res >> 1) + bit;
        }
        else
            res >>= 1;
        bit >>= 2;
    }
    return res;
}

//http://en.wikipedia.org/wiki/Primality_test
bool is_prime(int n)
{
    if (n % 2 == 0)
        return false;

    if (n % 3 == 0)
        return false;

    for (int i = 1; 6*i-1 <= sqrt(n);  i++)
    {
        if (n % (6*i-1) == 0)
            return false;

        if (6*i+1 <= sqrt(n))
            if (n % (6*i+1) == 0)
                return false;
    }

    return true;
}
    
bool is_carmichael(int n)
{
    if (n < 4)
        return false;

    //carmichael must be a composite
    if (is_prime(n))
        return false;

    for (int b = 2; b < n - 1; b++)
    {
        if (expmod(b, n, n) != b)
            return false;
    }

    return true;
}

//returns array up to the nth carmichael
int []carm(int x)
{
    int[] carm = alloc_array(int, x);

    int candidate = 0;
    for (int i = 0; i < x; i++)
    {
        candidate++;
        while (!is_carmichael(candidate)) {
            candidate++;
        }
        carm[i] = candidate;
    }

    return carm;
}

int main() {
    return carm(5)[4];
}
