//test return 0
// dynamically sized vector - doubles when it gets over capacity

struct vector {
    int capacity;
    int length;
    int[] a;
};

typedef struct vector vec_t;

void copy(int[] dst, int[] src, int length) {
    for (int i = 0; i < length; i++) {
        dst[i] = src[i];
    }
}

vec_t* new_vector() {
    vec_t* v = alloc(vec_t);
    v->capacity = 10;
    v->a = alloc_array(int, v->capacity);
    return v;
}

void append(vec_t* v, int x) {
    if (v->length == v->capacity) {
        int[] newa = alloc_array(int, v->capacity*2);
        copy(newa, v->a, v->capacity);
        v->capacity = v->capacity*2;
        v->a = newa;
    }
    v->a[v->length] = x;
    v->length++;
}

int main() {
    vec_t* v = new_vector();

    for (int i = 0; i < 100; i++) {
        append(v, i);
    }

    for (int i = 0; i < v->length; i++) {
        if (i != v->a[i])
            return -1;
    }

    return 0;
}
