//test exception 8

//DYNAMICALLY TYPED LANGUAGES ARE TYPESAFE
//----------------------------------------
//Progress : Either you reach a value or you divide by 0!

//introducing the wondrous dynamically typed c0 program!
//true type theorist edition

struct dyn {int i; bool b; bool class;};
typedef struct dyn dyn_t;

dyn_t * equals (dyn_t * i, dyn_t * j) {
    dyn_t * d = alloc(dyn_t);
    if (i->class == j->class) {
        if(i->class) {
            d->b = i->i == j->i;
            d->class = false;
            return d;
        } else {
            d->b = i->b == j->b;
            d->class = false;
            return d;
        }
    } else {
        d->b = false;
        d->class = false;
        return d;
    }
}

dyn_t * leq (dyn_t * i, dyn_t * j) {
    dyn_t * d = alloc(dyn_t);
    if (i->class == j->class) {
        if(i->class) {
            d->b = i->i <= j->i;
            d->class = false;
            return d;
        } else {
            d->b = i->b ? j->b : true;
            d->class = false;
            return d;
        }
    } else {
        d->b = false;
        d->class = false;
        return d;
    }
}

dyn_t * gt (dyn_t * i, dyn_t * j) {
    dyn_t * d = alloc(dyn_t);
    if (i->class == j->class) {
        if(i->class) {
            d->b = i->i > j->i;
            d->class = false;
            return d;
        } else {
            d->b = i->b ? !(j->b) : false;
            d->class = false;
            return d;
        }
    } else {
        d->b = false;
        d->class = false;
        return d;
    }
}

// true = int, false = bool
bool type_of (dyn_t * class) {
    return class->class;
}

dyn_t * fromInt (int i) {
    dyn_t * d = alloc(dyn_t);
    d->i = i;
    d->class = true;
    return d;
}

dyn_t * fromBool (bool b) {
    dyn_t * d = alloc(dyn_t);
    d->b = b;
    d->class = false;
    return d;
}

// A "typesafe" way of exposing primitives from dyn_t*
int toInt (dyn_t * i) {
    if(i->class) return i->i;
    else return 1/0;
}

bool toBool (dyn_t * b) {
    if(b->class) { 1/0; return false; }
    else return b->b;
}

dyn_t* copy(dyn_t* x) {
    dyn_t* y = alloc(dyn_t);
    y->i = x->i;
    y->b = x->b;
    y->class = x->class;
    return y;
}

// BURN THE EXPOSED PRIMITIVE TYPE!
int main() {
    dyn_t * n = fromInt(0);
    dyn_t * m = fromBool(false);
    
    if(toBool(m)) return toInt(n) + toInt(m);
    else {
        if(toBool( gt(n, m))) {
            return toInt(m);
        } else {
            // 100% typesafe!
            return toInt(fromBool(toBool(n)));
        }
    }
}
