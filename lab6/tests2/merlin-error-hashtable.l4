//test error
//small vs big datatype issue at line 18

//explicit linked list
struct node {
  struct node* next;
  int key;
  };

typedef struct node* nodep;
typedef struct node node;

nodep chain_insert(nodep head, nodep new_node)
{
  printint(new_node->key);
  nodep temp = head;
  if(temp == NULL)
    *head = *new_node;
  else
  {
    while(temp->next != NULL)
    {
      temp=temp->next;
    }
    temp->next = new_node;
  }
    return head;
}

int chain_search(int key, nodep head)
{
  nodep temp = head;
  while(temp != NULL && temp->key != key)
  {
    temp = temp-> next;
  }
  if(temp == NULL)
    return -1;
  else
    return temp->key;
}

int hash(int a)
{
  a = (a+0x7ed55d16) + (a<<12);
  a = (a^0xc761c23c) ^ (a>>19);
  a = (a+0x165667b1) + (a<<5);
  a = (a+0xd3a2646c) ^ (a<<9);
  a = (a+0xfd7046c5) + (a<<3);
  a = (a^0xb55a4f09) ^ (a>>16);
  if(a<0)
    return -a;
  else
    return a;
}

int insert(node[] table, int size, nodep new_item)
{
  int index = hash(new_item->key) % size;
  table[index].next = chain_insert(table[index].next,new_item);
  return index;
}

int lookup(node[] table, int size, int key)
{
  int index = hash(key) % size;
  return chain_search(key,table[index].next);
}

nodep get_new(int key)
{
  nodep n = alloc(struct node);
  n->key = key;
  n->next = NULL;
  return n;
}

int main()
{
  int size = 64;
  node[] table = alloc_array(struct node,64);
  for(int i = 0; i < size; i++)
  {
    table[i].key = -1;
    table[i].next = NULL;
  }
  for(int i = 0; i < 0xcafebabe; i++)
  {
    insert(table,size,get_new(i));
  }
  for(int i = 0; i < 0xcafebabe; i++)
  {
    if(lookup(table,size,i) < 0)
      return -1;
  }
  return 0;
}
